{"version":3,"sources":["components/ProjectCard/ProjectCard.tsx","components/Projects/Projects.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ProjectCard","Grid","container","spacing","item","style","width","maxWidth","Link","href","this","props","url","color","src","previewImagePath","alt","title","description","Component","Projects","projectCards","ProjectsData","projects","map","data","i","icon","height","getIconByTitle","xs","iconSize","App","textAlign","borderRadius","fontSize","Divider","variant","light","backgroundColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.bbef85d1.chunk.js","sourcesContent":["\r\nimport { Grid, Link } from '@material-ui/core';\r\nimport React, { Component } from 'react';\r\nclass ProjectCard extends Component<{ title: string, description: string, url: string, previewImagePath: string, icon: JSX.Element }, {}> {\r\n    public render() {\r\n        return <div >\r\n            <Grid container spacing={3}>\r\n                <Grid item style={{ width: '40%', maxWidth: '200px' }}>\r\n                    <Link href={this.props.url} color='inherit' ><img src={this.props.previewImagePath} alt=\"\" width={'100%'} /></Link>\r\n                </Grid>\r\n                <Grid item style={{ width: '60%' }}>\r\n                    <div><Link href={this.props.url} style={{ color: '#90caf9' }}><b>{this.props.title}</b></Link></div>\r\n                    <p>{this.props.description}</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ProjectCard;\r\n\r\n","import React from 'react';\r\nimport ProjectCard from '../ProjectCard/ProjectCard';\r\n\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport SportsGolfIcon from '@material-ui/icons/SportsGolf';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport WavesIcon from '@material-ui/icons/Waves';\r\n\r\nimport ProjectsData from './ProjectsCardData.json'\r\nimport { Grid } from '@material-ui/core';\r\n\r\nfunction Projects() {\r\n    const projectsData = ProjectsData;\r\n    const getIconByTitle = (title: string) => {\r\n        switch (title) {\r\n            case \"Sudoku Solver\":\r\n                return <AppsIcon style={{ width: '100%', height: '100%' }}></AppsIcon>\r\n            case \"Financial Planner\":\r\n                return <TrendingUpIcon style={{ width: '100%', height: '100%' }}></TrendingUpIcon>\r\n            case \"Course Analysis\":\r\n                return <SportsGolfIcon style={{ width: '100%', height: '100%' }}></SportsGolfIcon>\r\n            case \"Fast Feed\":\r\n                return <FlashOnIcon style={{ width: '100%', height: '100%' }}></FlashOnIcon>\r\n            case \"Up And Down The River\":\r\n                return <WavesIcon style={{ width: '100%', height: '100%' }}></WavesIcon>\r\n            default:\r\n                return <AppsIcon style={{ width: '100%', height: '100%' }}></AppsIcon>\r\n        }\r\n    };\r\n    const projectCards = projectsData.projects.map((data, i) => {\r\n        const icon = getIconByTitle(data.title);\r\n        return (\r\n            <Grid key={'card' + i} container spacing={3}>\r\n                <Grid item xs={1}>\r\n                    {/* Padding */}\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    <ProjectCard title={data.title} description={data.description} url={data.url} previewImagePath={data.previewImagePath} icon={icon}></ProjectCard>\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    {/* Padding */}\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {projectCards}\r\n        </div >\r\n    );\r\n}\r\n\r\n\r\nexport default Projects;\r\n\r\n","import { Divider, Grid, Link } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Projects from './components/Projects/Projects';\r\n\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nconst iconSize = \"large\"\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <div style={{ height: 50 }}>\r\n        {/* Vertical spacing */}\r\n      </div>\r\n      <div style={{ textAlign: 'center' }}>\r\n        {/* Container for my profile */}\r\n        <div>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={2}>\r\n              {/* Padding */}\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <div><img src=\"images/Headshot.png\" alt=\"\" style={{ borderRadius: '50%', maxWidth: '200px' }} ></img></div>\r\n              <h1>Cole Gannaway</h1>\r\n              <p>Graduated from the University of Alabama with a Bachelor of Science degree in Computer Science and Software Engineering.</p>\r\n              <p>Interests include but are not limited to Cloud Computing, Web Development, and Automated Intelligence.</p>\r\n              <p>Personal projects include a <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://www.colegannaway.com/Sudoku-Solver-Front-End/\">Sudoku Solver</Link> hosted on AWS,\r\n                a graphical <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://www.colegannaway.com/FinancialPlanner/\">Financial Planner</Link> that projects one's future financial status,\r\n                and a golf <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://www.colegannaway.com/Hoover-CC-Teebox-Analysis/\">Course Analyzer</Link> that reveals the course's possiblities.</p>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={2}>\r\n                  {/* Padding */}\r\n                </Grid>\r\n                <Grid container item xs={8}>\r\n                  <Grid item xs>\r\n                    <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://github.com/cole-gannaway\"><GitHubIcon fontSize={iconSize} /></Link>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://www.linkedin.com/in/cole-gannaway/\"><LinkedInIcon fontSize={iconSize} /></Link>\r\n                  </Grid>\r\n                  <Grid item xs>\r\n                    <Link color='inherit' style={{ color: '#90caf9' }} href=\"https://www.facebook.com/cole.gannaway\"><FacebookIcon fontSize={iconSize} /></Link>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  {/* Padding */}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              {/* Padding */}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 50 }}>\r\n        {/* Vertical spacing */}\r\n      </div>\r\n      <Divider variant=\"middle\" light={true} style={{ backgroundColor: 'white' }} />\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={1}>\r\n          {/* Padding */}\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <h1>Projects</h1>\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n          {/* Padding */}\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ textAlign: 'center' }}>\r\n      </div>\r\n      <Projects></Projects>\r\n      <div style={{ height: 50 }}>\r\n        {/* Vertical spacing */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}